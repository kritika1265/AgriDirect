# AgriDirect Flutter Project Analysis Options
# This file configures the analyzer for Dart and Flutter code quality
# https://dart.dev/guides/language/analysis-options

# Include recommended lints for Flutter apps
include: package:flutter_lints/flutter.yaml

# Analyzer configuration
analyzer:
  # Exclude certain directories from analysis
  exclude:
    - "**/*.g.dart"
    - "**/*.freezed.dart"
    - "**/*.mocks.dart"
    - "**/generated_plugin_*.dart"
    - "build/**"
    - "android/**"
    - "ios/**"
    - "web/**"
    - "macos/**"
    - "windows/**"
    - "linux/**"

  # Strong mode configuration
  strong-mode:
    implicit-casts: false
    implicit-dynamic: false

  # Language configuration
  language:
    strict-casts: true
    strict-inference: true
    strict-raw-types: true

  # Error handling
  errors:
    # Treat missing required parameters as errors
    missing_required_param: error
    # Treat missing returns as errors
    missing_return: error
    # Treat invalid assignments as errors
    invalid_assignment: error
    # Treat dead code as warnings
    dead_code: warning
    # Treat unused imports as warnings
    unused_import: warning
    # Treat unused local variables as warnings
    unused_local_variable: warning
    # Treat unused elements as info
    unused_element: info
    # Treat deprecated member use as warnings
    deprecated_member_use: warning
    # Treat deprecated member use from same package as info
    deprecated_member_use_from_same_package: info

# Linter configuration
linter:
  rules:
    # ================================
    # ERROR RULES (Critical Issues)
    # ================================
    
    # Prevent common errors
    - always_declare_return_types
    - always_require_non_null_named_parameters
    - annotate_overrides
    - avoid_empty_else
    - avoid_init_to_null
    - avoid_null_checks_in_equality_operators
    - avoid_relative_lib_imports
    - avoid_return_types_on_setters
    - avoid_shadowing_type_parameters
    - avoid_types_as_parameter_names
    - camel_case_extensions
    - camel_case_types
    - curly_braces_in_flow_control_structures
    - empty_catches
    - empty_constructor_bodies
    - library_names
    - library_prefixes
    - no_duplicate_case_values
    - null_closures
    - omit_local_variable_types
    - prefer_adjacent_string_concatenation
    - prefer_collection_literals
    - prefer_conditional_assignment
    - prefer_contains
    - prefer_equal_for_default_values
    - prefer_final_fields
    - prefer_for_elements_to_map_fromIterable
    - prefer_generic_function_type_aliases
    - prefer_if_null_operators
    - prefer_is_empty
    - prefer_is_not_empty
    - prefer_iterable_whereType
    - prefer_single_quotes
    - prefer_spread_collections
    - recursive_getters
    - slash_for_doc_comments
    - type_init_formals
    - unawaited_futures
    - unnecessary_const
    - unnecessary_new
    - unnecessary_null_in_if_null_operators
    - unnecessary_this
    - unrelated_type_equality_checks
    - use_function_type_syntax_for_parameters
    - use_rethrow_when_possible
    - valid_regexps

    # ================================
    # STYLE RULES (Code Quality)
    # ================================
    
    # Naming conventions
    - camel_case_extensions
    - camel_case_types
    - file_names
    - non_constant_identifier_names
    - constant_identifier_names
    - library_names
    - library_prefixes
    - package_names

    # Documentation
    - public_member_api_docs
    - comment_references
    - slash_for_doc_comments

    # Code organization
    - directives_ordering
    - sort_constructors_first
    - sort_pub_dependencies
    - sort_unnamed_constructors_first

    # Best practices
    - always_put_control_body_on_new_line
    - always_put_required_named_parameters_first
    - avoid_bool_literals_in_conditional_expressions
    - avoid_catching_errors
    - avoid_double_and_int_checks
    - avoid_field_initializers_in_const_classes
    - avoid_function_literals_in_foreach_calls
    - avoid_implementing_value_types
    - avoid_js_rounded_ints
    - avoid_positional_boolean_parameters
    - avoid_private_typedef_functions
    - avoid_redundant_argument_values
    - avoid_renaming_method_parameters
    - avoid_returning_null_for_void
    - avoid_setters_without_getters
    - avoid_single_cascade_in_expression_statements
    - avoid_slow_async_io
    - avoid_unnecessary_containers
    - avoid_void_async
    - await_only_futures
    - cascade_invocations
    - close_sinks
    - control_flow_in_finally
    - empty_statements
    - hash_and_equals
    - invariant_booleans
    - iterable_contains_unrelated_type
    - join_return_with_assignment
    - list_remove_unrelated_type
    - literal_only_boolean_expressions
    - no_adjacent_strings_in_list
    - no_logic_in_create_state
    - parameter_assignments
    - prefer_asserts_in_initializer_lists
    - prefer_asserts_with_message
    - prefer_const_constructors
    - prefer_const_constructors_in_immutables
    - prefer_const_declarations
    - prefer_const_literals_to_create_immutables
    - prefer_constructors_over_static_methods
    - prefer_expression_function_bodies
    - prefer_final_in_for_each
    - prefer_final_locals
    - prefer_foreach
    - prefer_function_declarations_over_variables
    - prefer_if_elements_to_conditional_expressions
    - prefer_initializing_formals
    - prefer_inlined_adds
    - prefer_int_literals
    - prefer_interpolation_to_compose_strings
    - prefer_is_not_operator
    - prefer_null_aware_operators
    - prefer_typing_uninitialized_variables
    - prefer_void_to_null
    - provide_deprecation_message
    - sized_box_for_whitespace
    - throw_in_finally
    - unnecessary_await_in_return
    - unnecessary_brace_in_string_interps
    - unnecessary_getters_setters
    - unnecessary_null_aware_assignments
    - unnecessary_overrides
    - unnecessary_parenthesis
    - unnecessary_statements
    - unnecessary_string_escapes
    - unnecessary_string_interpolations
    - use_full_hex_values_for_flutter_colors
    - use_is_even_rather_than_modulo
    - use_key_in_widget_constructors
    - use_late_for_private_fields_and_variables
    - use_named_constants
    - use_raw_strings
    - use_string_buffers
    - use_to_and_as_if_applicable
    - void_checks

    # ================================
    # FLUTTER SPECIFIC RULES
    # ================================
    
    # Widget best practices
    - avoid_print
    - avoid_web_libraries_in_flutter
    - no_logic_in_create_state
    - prefer_const_constructors
    - prefer_const_constructors_in_immutables
    - prefer_const_declarations
    - prefer_const_literals_to_create_immutables
    - sized_box_for_whitespace
    - use_build_context_synchronously
    - use_colored_box
    - use_decorated_box
    - use_full_hex_values_for_flutter_colors
    - use_key_in_widget_constructors

    # ================================
    # PERFORMANCE RULES
    # ================================
    
    - avoid_slow_async_io
    - close_sinks
    - prefer_foreach
    - prefer_for_elements_to_map_fromIterable
    - prefer_spread_collections

    # ================================
    # DISABLED RULES (Project Specific)
    # ================================
    
    # These rules are disabled for this project
    # Uncomment if you want to enable them
    
    # - always_specify_types  # Disabled to allow type inference
    # - avoid_annotating_with_dynamic  # Disabled for flexibility
    # - avoid_as  # Disabled to allow type casting when necessary
    # - avoid_classes_with_only_static_members  # Disabled for utility classes
    # - avoid_function_literals_in_foreach_calls  # Disabled for functional programming
    # - diagnostic_describe_all_properties  # Disabled to reduce boilerplate
    # - lines_longer_than_80_chars  # Disabled for modern screens
    # - one_member_abstracts  # Disabled for interface definition flexibility
    # - prefer_double_quotes  # Disabled in favor of single quotes
    # - prefer_expression_function_bodies  # Disabled for readability preference
    # - prefer_mixin  # Disabled to allow both mixins and abstract classes