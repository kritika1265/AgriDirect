import 'package:firebase_core/firebase_core.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:provider/provider.dart';

import 'config/app_config.dart';
import 'config/firebase_config.dart';
import 'firebase_options.dart'; // Generated by flutterfire configure
import 'providers/auth_provider.dart';
import 'providers/connectivity_provider.dart';
import 'providers/ml_provider.dart';
import 'providers/theme_provider.dart';
import 'providers/weather_provider.dart';
import 'services/notification_service.dart';
import 'utils/colors.dart';

// Import all screens
import 'screens/splash_screen.dart';
import 'screens/auth_screen.dart';
import 'screens/home_screen.dart';
import 'screens/profile_screen.dart';
import 'screens/settings_screen.dart';
import 'screens/weather_screen.dart';
import 'screens/crop_calendar_screen.dart';
import 'screens/crop_prediction_screen.dart';
import 'screens/disease_detection_screen.dart';
import 'screens/marketplace_screen.dart';
import 'screens/rent_tools_screen.dart';
import 'screens/smart_connect_screen.dart';
import 'screens/feed_screen.dart';
import 'screens/help_screen.dart';

void main() async {
  // Ensure Flutter bindings are initialized
  WidgetsFlutterBinding.ensureInitialized();
  
  if (kDebugMode) {
    print('üöÄ Starting AgriDirect App...');
  }
  
  // Load environment variables first
  await _loadEnvironmentVariables();
  
  // Set up error handling for the app
  _setupErrorHandling();
  
  try {
    // Initialize the application
    await _initializeApp();
    
    if (kDebugMode) {
      print('‚úÖ App initialization completed successfully');
    }
    
    // Run the app
    runApp(const AgriDirectApp());
  } catch (e, stackTrace) {
    // Handle initialization errors
    if (kDebugMode) {
      print('‚ùå Critical initialization error: $e');
      print('Stack trace: $stackTrace');
    }
    _handleInitializationError(e, stackTrace);
  }
}

/// Load environment variables with proper error handling
Future<void> _loadEnvironmentVariables() async {
  try {
    await dotenv.load(fileName: '.env');
    if (kDebugMode) {
      print('‚úÖ Environment variables loaded successfully');
    }
  } catch (e) {
    if (kDebugMode) {
      print('‚ö†Ô∏è Warning: Could not load .env file: $e');
      print('App will use default configuration');
    }
    // Don't throw error - app can work without .env file
  }
}

/// Initialize all app dependencies
Future<void> _initializeApp() async {
  try {
    if (kDebugMode) {
      print('üîß Initializing app dependencies...');
    }
    
    // Initialize Firebase
    await _initializeFirebase();
    
    // Initialize other services
    await _initializeServices();
    
    // Set up system UI
    await _setupSystemUI();
    
    if (kDebugMode) {
      print('‚úÖ All app dependencies initialized successfully');
    }
  } catch (e) {
    if (kDebugMode) {
      print('‚ùå App initialization failed: $e');
    }
    rethrow;
  }
}

/// Initialize Firebase with proper error handling
Future<void> _initializeFirebase() async {
  try {
    if (kDebugMode) {
      print('üî• Initializing Firebase...');
    }
    
    // Initialize Firebase with platform-specific options
    if (Firebase.apps.isEmpty) {
      await Firebase.initializeApp(
        options: DefaultFirebaseOptions.currentPlatform,
      );
      if (kDebugMode) {
        print('‚úÖ Firebase app initialized');
      }
    } else {
      if (kDebugMode) {
        print('‚úÖ Firebase already initialized');
      }
    }
    
    // Initialize Firebase config instance
    final firebaseConfig = FirebaseConfig();
    await firebaseConfig.initialize();
    
    if (kDebugMode) {
      print('‚úÖ Firebase services initialized successfully');
      print('Available services: ${firebaseConfig.availableServices}');
      print('Is initialized: ${firebaseConfig.isInitialized}');
    }
  } catch (e) {
    if (kDebugMode) {
      print('‚ùå Firebase initialization failed: $e');
      print('üí° Tip: Run "flutterfire configure" to set up Firebase properly');
      print('üì± App will continue without Firebase - some features may be limited');
    }
    
    // Don't throw error if Firebase fails - app can work offline
  }
}

/// Initialize other services
Future<void> _initializeServices() async {
  try {
    if (kDebugMode) {
      print('üõ†Ô∏è Initializing services...');
    }
    
    // Initialize notifications only if Firebase is available
    final firebaseConfig = FirebaseConfig();
    if (firebaseConfig.isInitialized && firebaseConfig.messaging != null) {
      try {
        final notificationService = NotificationService();
        await notificationService.initialize();
        if (kDebugMode) {
          print('‚úÖ Notification service initialized successfully');
        }
      } catch (e) {
        if (kDebugMode) {
          print('‚ö†Ô∏è Notifications service failed to initialize: $e');
        }
      }
    } else {
      if (kDebugMode) {
        print('‚ö†Ô∏è Skipping notification service - Firebase messaging not available');
      }
    }
    
    // Initialize other services here as needed
    // await _initializeLocationService();
    // await _initializeCameraService();
    
    if (kDebugMode) {
      print('‚úÖ Services initialization completed');
    }
  } catch (e) {
    if (kDebugMode) {
      print('‚ö†Ô∏è Warning: Some services failed to initialize: $e');
    }
    // Don't throw error - app can work without some services
  }
}

/// Set up system UI preferences
Future<void> _setupSystemUI() async {
  try {
    if (kDebugMode) {
      print('üé® Setting up system UI...');
    }
    
    // Set preferred orientations
    await SystemChrome.setPreferredOrientations([
      DeviceOrientation.portraitUp,
      DeviceOrientation.portraitDown,
    ]);
    
    // Set system UI overlay style
    SystemChrome.setSystemUIOverlayStyle(
      const SystemUiOverlayStyle(
        statusBarColor: Colors.transparent,
        statusBarIconBrightness: Brightness.dark,
        statusBarBrightness: Brightness.light,
        systemNavigationBarColor: Colors.transparent,
        systemNavigationBarIconBrightness: Brightness.dark,
      ),
    );
    
    if (kDebugMode) {
      print('‚úÖ System UI configured successfully');
    }
  } catch (e) {
    if (kDebugMode) {
      print('‚ö†Ô∏è Warning: System UI setup failed: $e');
    }
    // Don't throw error - app can work without custom UI settings
  }
}

/// Set up global error handling
void _setupErrorHandling() {
  if (kDebugMode) {
    print('üõ°Ô∏è Setting up error handling...');
  }
  
  // Handle Flutter framework errors
  FlutterError.onError = (FlutterErrorDetails details) {
    FlutterError.presentError(details);
    
    if (kDebugMode) {
      print('‚ùå Flutter Error: ${details.exception}');
      print('üìç StackTrace: ${details.stack}');
    }
    
    // Report to Firebase Crashlytics if available
    try {
      final firebaseConfig = FirebaseConfig();
      if (firebaseConfig.isInitialized && firebaseConfig.crashlytics != null) {
        firebaseConfig.recordError(details.exception, details.stack);
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ö†Ô∏è Failed to report error to Crashlytics: $e');
      }
    }
  };
  
  // Handle other errors
  PlatformDispatcher.instance.onError = (error, stack) {
    if (kDebugMode) {
      print('‚ùå Platform Error: $error');
      print('üìç StackTrace: $stack');
    }
    
    // Report to Firebase Crashlytics if available
    try {
      final firebaseConfig = FirebaseConfig();
      if (firebaseConfig.isInitialized && firebaseConfig.crashlytics != null) {
        firebaseConfig.recordError(error, stack);
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ö†Ô∏è Failed to report error to Crashlytics: $e');
      }
    }
    
    return true;
  };
  
  if (kDebugMode) {
    print('‚úÖ Error handling configured');
  }
}

/// Handle initialization errors
void _handleInitializationError(Object error, StackTrace stackTrace) {
  if (kDebugMode) {
    print('üí• Critical initialization error: $error');
    print('üìç StackTrace: $stackTrace');
  }
  
  // Run a minimal error app
  runApp(
    MaterialApp(
      title: 'AgriDirect - Error',
      home: InitializationErrorScreen(error: error.toString()),
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        useMaterial3: true,
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.red),
      ),
    ),
  );
}

/// Error screen shown when app fails to initialize
class InitializationErrorScreen extends StatelessWidget {
  /// Creates an initialization error screen
  const InitializationErrorScreen({
    required this.error,
    super.key,
  });

  /// The error message to display
  final String error;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.red.shade50,
      body: SafeArea(
        child: Padding(
          padding: const EdgeInsets.all(24.0),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(
                Icons.error_outline,
                size: 80,
                color: Colors.red.shade600,
              ),
              const SizedBox(height: 24),
              Text(
                'Failed to Start AgriDirect',
                style: TextStyle(
                  fontSize: 24,
                  fontWeight: FontWeight.bold,
                  color: Colors.red.shade800,
                ),
                textAlign: TextAlign.center,
              ),
              const SizedBox(height: 16),
              Text(
                'The app encountered an error during initialization. Please restart the app or contact support if the problem persists.',
                style: TextStyle(
                  fontSize: 16,
                  color: Colors.red.shade700,
                ),
                textAlign: TextAlign.center,
              ),
              if (kDebugMode) ...[
                const SizedBox(height: 24),
                Container(
                  padding: const EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    color: Colors.grey.shade100,
                    borderRadius: BorderRadius.circular(8),
                    border: Border.all(color: Colors.grey.shade300),
                  ),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        'Debug Information:',
                        style: TextStyle(
                          fontSize: 14,
                          fontWeight: FontWeight.bold,
                          color: Colors.grey.shade800,
                        ),
                      ),
                      const SizedBox(height: 8),
                      SingleChildScrollView(
                        scrollDirection: Axis.horizontal,
                        child: Text(
                          error,
                          style: TextStyle(
                            fontSize: 12,
                            color: Colors.grey.shade700,
                            fontFamily: 'monospace',
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ],
              const SizedBox(height: 32),
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                children: [
                  ElevatedButton(
                    onPressed: () {
                      // Try to restart by reinitializing
                      main();
                    },
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.blue.shade600,
                      foregroundColor: Colors.white,
                      padding: const EdgeInsets.symmetric(
                        horizontal: 24,
                        vertical: 16,
                      ),
                    ),
                    child: const Text('Retry'),
                  ),
                  ElevatedButton(
                    onPressed: () {
                      // Exit the app
                      SystemNavigator.pop();
                    },
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.red.shade600,
                      foregroundColor: Colors.white,
                      padding: const EdgeInsets.symmetric(
                        horizontal: 24,
                        vertical: 16,
                      ),
                    ),
                    child: const Text('Exit App'),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }
}

/// Main application widget
class AgriDirectApp extends StatelessWidget {
  /// Creates the main application widget
  const AgriDirectApp({super.key});

  @override
  Widget build(BuildContext context) {
    if (kDebugMode) {
      print('üéØ Building AgriDirectApp...');
    }
    
    return MultiProvider(
      providers: [
        ChangeNotifierProvider(
          create: (context) {
            if (kDebugMode) {
              print('üîê Creating AuthProvider...');
            }
            return AuthProvider();
          },
          lazy: false, // Initialize immediately
        ),
        ChangeNotifierProvider(
          create: (context) {
            if (kDebugMode) {
              print('üé® Creating ThemeProvider...');
            }
            return ThemeProvider();
          },
          lazy: false, // Initialize immediately for theme
        ),
        ChangeNotifierProvider(
          create: (context) {
            if (kDebugMode) {
              print('üì° Creating ConnectivityProvider...');
            }
            return ConnectivityProvider();
          },
          lazy: false, // Initialize immediately for connectivity
        ),
        ChangeNotifierProvider(
          create: (context) {
            if (kDebugMode) {
              print('üå§Ô∏è Creating WeatherProvider...');
            }
            return WeatherProvider();
          },
        ),
        ChangeNotifierProvider(
          create: (context) {
            if (kDebugMode) {
              print('ü§ñ Creating MLProvider...');
            }
            return MLProvider();
          },
        ),
      ],
      child: Builder(
        builder: (context) {
          if (kDebugMode) {
            print('üèóÔ∏è Building MaterialApp with providers...');
          }
          
          return Consumer<ThemeProvider>(
            builder: (context, themeProvider, child) {
              if (kDebugMode) {
                print('üé® ThemeProvider consumed, isDarkMode: ${themeProvider.isDarkMode}');
              }
              
              return MaterialApp(
                title: AppConfig.appName,
                debugShowCheckedModeBanner: false,
                theme: _buildTheme(false),
                darkTheme: _buildTheme(true),
                themeMode: themeProvider.isDarkMode 
                    ? ThemeMode.dark 
                    : ThemeMode.light,
                
                // App routing logic
                home: Consumer<AuthProvider>(
                  builder: (context, authProvider, child) {
                    if (kDebugMode) {
                      print('üîê AuthProvider state: isLoading=${authProvider.isLoading}, isAuthenticated=${authProvider.isAuthenticated}');
                    }
                    
                    // Show splash screen while checking auth state
                    if (authProvider.isLoading) {
                      return const SplashScreen();
                    }
                    
                    // Navigate based on authentication state
                    if (authProvider.isAuthenticated) {
                      return const HomeScreen();
                    } else {
                      return const AuthScreen();
                    }
                  },
                ),
                
                // Define all app routes
                routes: {
                  '/splash': (context) => const SplashScreen(),
                  '/auth': (context) => const AuthScreen(),
                  '/home': (context) => const HomeScreen(),
                  '/profile': (context) => const ProfileScreen(),
                  '/settings': (context) => const SettingsScreen(),
                  '/weather': (context) => const WeatherScreen(),
                  '/crop-calendar': (context) => const CropCalendarScreen(),
                  '/crop-prediction': (context) => const CropPredictionScreen(),
                  '/disease-detection': (context) => const DiseaseDetectionScreen(),
                  '/marketplace': (context) => const MarketplaceScreen(),
                  '/rent-tools': (context) => const RentToolsScreen(),
                  '/smart-connect': (context) => const SmartConnectScreen(),
                  '/feed': (context) => const FeedScreen(),
                  '/help': (context) => const HelpScreen(),
                },
                
                // Global app configurations
                builder: (context, child) {
                  // Handle app-level errors
                  ErrorWidget.builder = (FlutterErrorDetails errorDetails) {
                    if (kDebugMode) {
                      print('‚ùå Building error widget for: ${errorDetails.exception}');
                    }
                    return _buildErrorWidget(errorDetails);
                  };
                  
                  // Handle text scaling and accessibility
                  return MediaQuery(
                    data: MediaQuery.of(context).copyWith(
                      textScaler: TextScaler.linear(
                        MediaQuery.textScalerOf(context)
                            .scale(1.0)
                            .clamp(0.8, 1.3),
                      ),
                    ),
                    child: child!,
                  );
                },
                
                // Locale settings
                supportedLocales: const [
                  Locale('en', 'US'),
                  Locale('hi', 'IN'), // Hindi support for Indian farmers
                  Locale('gu', 'IN'), // Gujarati support
                ],
                
                // Route handling
                onGenerateRoute: (RouteSettings settings) {
                  if (kDebugMode) {
                    print('üìç Generating route for: ${settings.name}');
                  }
                  
                  // Handle dynamic routes with parameters
                  switch (settings.name) {
                    case '/profile':
                      return _createRoute(const ProfileScreen());
                    case '/settings':
                      return _createRoute(const SettingsScreen());
                    case '/weather':
                      return _createRoute(const WeatherScreen());
                    case '/crop-calendar':
                      return _createRoute(const CropCalendarScreen());
                    case '/crop-prediction':
                      return _createRoute(const CropPredictionScreen());
                    case '/disease-detection':
                      return _createRoute(const DiseaseDetectionScreen());
                    case '/marketplace':
                      return _createRoute(const MarketplaceScreen());
                    case '/rent-tools':
                      return _createRoute(const RentToolsScreen());
                    case '/smart-connect':
                      return _createRoute(const SmartConnectScreen());
                    case '/feed':
                      return _createRoute(const FeedScreen());
                    case '/help':
                      return _createRoute(const HelpScreen());
                    default:
                      return null;
                  }
                },
                
                onUnknownRoute: (settings) {
                  if (kDebugMode) {
                    print('‚ùì Unknown route: ${settings.name}');
                  }
                  return MaterialPageRoute(
                    builder: (context) => const _NotFoundScreen(),
                  );
                },
              );
            },
          );
        },
      ),
    );
  }

  /// Create custom page route with animation
  PageRoute _createRoute(Widget page) {
    return PageRouteBuilder(
      pageBuilder: (context, animation, secondaryAnimation) => page,
      transitionsBuilder: (context, animation, secondaryAnimation, child) {
        const begin = Offset(1.0, 0.0);
        const end = Offset.zero;
        const curve = Curves.easeInOutCubic;

        var tween = Tween(begin: begin, end: end).chain(
          CurveTween(curve: curve),
        );

        return SlideTransition(
          position: animation.drive(tween),
          child: child,
        );
      },
      transitionDuration: const Duration(milliseconds: 300),
    );
  }

  /// Build custom error widget for runtime errors
  Widget _buildErrorWidget(FlutterErrorDetails errorDetails) {
    return Material(
      child: Container(
        color: Colors.red.shade50,
        padding: const EdgeInsets.all(16),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.error_outline,
              size: 48,
              color: Colors.red.shade600,
            ),
            const SizedBox(height: 16),
            Text(
              'Something went wrong',
              style: TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
                color: Colors.red.shade800,
              ),
            ),
            const SizedBox(height: 8),
            Text(
              'Please try again or contact support if the problem persists.',
              style: TextStyle(
                fontSize: 14,
                color: Colors.red.shade600,
              ),
              textAlign: TextAlign.center,
            ),
            if (kDebugMode) ...[
              const SizedBox(height: 16),
              Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.grey.shade100,
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Text(
                  errorDetails.exception.toString(),
                  style: const TextStyle(
                    fontSize: 12,
                    fontFamily: 'monospace',
                  ),
                  textAlign: TextAlign.center,
                ),
              ),
            ],
          ],
        ),
      ),
    );
  }

  /// Build app theme
  ThemeData _buildTheme(bool isDarkMode) {
    final colorScheme = isDarkMode
        ? ColorScheme.fromSeed(
            seedColor: AppColors.primary,
            brightness: Brightness.dark,
          )
        : ColorScheme.fromSeed(
            seedColor: AppColors.primary,
            brightness: Brightness.light,
          );

    return ThemeData(
      useMaterial3: true,
      colorScheme: colorScheme,
      fontFamily: 'Roboto',
      
      // App Bar Theme
      appBarTheme: AppBarTheme(
        centerTitle: true,
        backgroundColor: colorScheme.surface,
        foregroundColor: colorScheme.onSurface,
        surfaceTintColor: Colors.transparent,
        elevation: 0,
        titleTextStyle: TextStyle(
          fontSize: 20,
          fontWeight: FontWeight.w600,
          color: colorScheme.onSurface,
          fontFamily: 'Roboto',
        ),
      ),
      
      // Button Themes
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          elevation: 2,
          shadowColor: colorScheme.shadow,
          padding: const EdgeInsets.symmetric(
            horizontal: 24,
            vertical: 12,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
          textStyle: const TextStyle(
            fontSize: 16,
            fontWeight: FontWeight.w600,
          ),
        ),
      ),
      
      // Card Theme
      cardTheme: CardThemeData(
        elevation: 2,
        shadowColor: colorScheme.shadow.withOpacity(0.2),
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(16),
        ),
        clipBehavior: Clip.antiAlias,
      ),
      
      // Input Decoration Theme
      inputDecorationTheme: InputDecorationTheme(
        filled: true,
        fillColor: colorScheme.surfaceContainerHighest.withOpacity(0.3),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide.none,
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(
            color: colorScheme.outline.withOpacity(0.3),
          ),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(
            color: colorScheme.primary,
            width: 2,
          ),
        ),
        contentPadding: const EdgeInsets.symmetric(
          horizontal: 16,
          vertical: 16,
        ),
      ),
      
      // Bottom Navigation Bar Theme
      bottomNavigationBarTheme: BottomNavigationBarThemeData(
        elevation: 8,
        backgroundColor: colorScheme.surface,
        selectedItemColor: colorScheme.primary,
        unselectedItemColor: colorScheme.onSurface.withOpacity(0.6),
        type: BottomNavigationBarType.fixed,
        selectedLabelStyle: const TextStyle(
          fontSize: 12,
          fontWeight: FontWeight.w600,
        ),
        unselectedLabelStyle: const TextStyle(
          fontSize: 12,
          fontWeight: FontWeight.w400,
        ),
      ),
      
      // Floating Action Button Theme
      floatingActionButtonTheme: FloatingActionButtonThemeData(
        elevation: 6,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(16),
        ),
      ),
      
      // Dialog Theme
      dialogTheme: DialogThemeData(
        elevation: 8,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(16),
        ),
        titleTextStyle: TextStyle(
          fontSize: 20,
          fontWeight: FontWeight.w600,
          color: colorScheme.onSurface,
        ),
      ),
      
      // Snackbar Theme
      snackBarTheme: SnackBarThemeData(
        behavior: SnackBarBehavior.floating,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(12),
        ),
        actionTextColor: colorScheme.primary,
      ),
      
      // List Tile Theme
      listTileTheme: ListTileThemeData(
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(8),
        ),
        contentPadding: const EdgeInsets.symmetric(
          horizontal: 16,
          vertical: 8,
        ),
      ),
    );
  }
}

/// Not found screen for unknown routes
class _NotFoundScreen extends StatelessWidget {
  const _NotFoundScreen();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Page Not Found'),
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () => Navigator.of(context).pushReplacementNamed('/home'),
        ),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.error_outline,
              size: 100,
              color: Colors.grey.shade400,
            ),
            const SizedBox(height: 24),
            Text(
              '404 - Page Not Found',
              style: TextStyle(
                fontSize: 24,
                fontWeight: FontWeight.bold,
                color: Colors.grey.shade700,
              ),
            ),
            const SizedBox(height: 16),
            Text(
              'The page you are looking for does not exist.',
              style: TextStyle(
                fontSize: 16,
                color: Colors.grey.shade600,
              ),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 32),
            ElevatedButton.icon(
              onPressed: () => Navigator.of(context).pushReplacementNamed('/home'),
              icon: const Icon(Icons.home),
              label: const Text('Go to Home'),
              style: ElevatedButton.styleFrom(
                padding: const EdgeInsets.symmetric(
                  horizontal: 32,
                  vertical: 16,
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}